#!/bin/bash
#===============================================================================
# FILE : process.sh
# USAGE : ./process.sh
#
# DESCRIPTION : ---
#
# OPTIONS :---
# REQUIREMENTS :---
# AUTHOR : Aleksey Krasnobaev (https://github.com/krasnobaev)
# COMPANY : ---
# VERSION : 0.2.1 / 02/10/2014 10:38:53 PM MSK
# LICENSE : MIT
#===============================================================================

#===  FUNCTION  ================================================================
# NAME : clean
# DESCRIPTION : cleaning generated files
#===============================================================================
function clean {
	if [ -z "${a}" ]; then
		read -p 'Clean index? ' -n 1 -r; printf '\n'
	else REPLY='Y'; fi
	if [[ -e $LUCENE_INDEX && ($REPLY =~ ^[Yy]$) ]]
	then
		rm "$LUCENE_INDEX/"*
	fi
	if [ -z "${a}" ]; then
		read -p 'Clean queries? ' -n 1 -r; printf '\n'
	else REPLY='Y'; fi
	if [[ -e $QUERIES && ($REPLY =~ ^[Yy]$) ]]
	then
		rm "$QUERIES"
	fi
	if [ -z "${a}" ]; then
		read -p 'Clean SERPs? ' -n 1 -r; printf '\n'
	else REPLY='Y'; fi
	if [[ $REPLY =~ ^[Yy]$ ]]
	then
		rm "$SERP" "$SERP.top10" "$SERP.top100" \
			"$RETURNED" "$RETURNED.top10" \
			"$RETURNED.top100" "$RET" "$TRECEVAL_INPUT"
	fi
	if [ -z "${a}" ]; then
		read -p 'Clean relations? ' -n 1 -r; printf '\n'
	else REPLY='Y'; fi
	if [[ -e $RELEVANT && ($REPLY =~ ^[Yy]$) ]]
	then
		rm "$RELEVANT" "$REL" "$TRECEVAL_QRELS"
	fi
	if [ -z "${a}" ]; then
		read -p 'Clean metrics? ' -n 1 -r; printf '\n'
	else REPLY='Y'; fi
	if [[ $REPLY =~ ^[Yy]$ ]]
	then
		rm "$OCTAVE_OUT" "$OCTAVE_STAT" "$RIR" "$RIR.top10" "$RIR.top100" "$TRECEVAL_OUT" \
			"$TRECEVAL_OUT.csv"
	fi
}

#===  FUNCTION  ================================================================
# NAME : f0
# DESCRIPTION : Environment check
#        System/Software Requirements/Dependencies
#        https://lucene.apache.org/core/4_0_0/demo/overview-summary.html#Setting_your_CLASSPATH
#        http://stackoverflow.com/questions/9329650/java-classpath-linux
#        .bashrc
#===============================================================================
function f0 {
	echo '0. Environment check'

	if [ -z "$JAVA_HOME" ]; then
		echo 'Warning. JAVA_HOME environment variable is not set.'
	fi

	echo "$CLASSPATH" | grep -q "lucene-core-4.6.1.jar" || \
		echo 'Warning. lucene-core-4.6.1.jar not found. Please check CLASSPATH environment variable.'
	echo "$CLASSPATH" | grep -q "lucene-queryparser-4.6.1.jar" || \
		echo 'Warning. lucene-queryparser-4.6.1.jar not found. Please check CLASSPATH environment variable.'
	echo "$CLASSPATH" | grep -q "lucene-demo-4.6.1.jar" || \
		echo 'Warning. lucene-demo-4.6.1.jar not found. Please check CLASSPATH environment variable.'
	echo "$CLASSPATH" | grep -q "lucene-analyzers-common-4.6.1.jar" || \
		echo 'Warning. lucene-analyzers-common-4.6.1.jar not found. Please check CLASSPATH environment variable.'
	command -v trec_eval >/dev/null 2>&1 || { echo >&2 ':( trec_eval is not installed.'; }

	# Corpora
	# CACM1DIR='ftp://ftp.cs.cornell.edu/pub/smart/cacm/'
	# CACM2='http://ir.dcs.gla.ac.uk/resources/test_collections/cacm/cacm.tar.gz'
	# CACM2DIR='http://ir.dcs.gla.ac.uk/resources/test_collections/cacm/'
	# CACM3='http://dg3rtljvitrle.cloudfront.net/cacm.tar.gz'
	# CACM3DIR='http://www.search-engines-book.com/collections/'

	CORPUS_PREFIX='cacm'
	SE_PREFIX='lucene'

	# Input
	CACM_CORPUS='/usr/data/cacm/search-engines-book.com/cacm.html/'
	CACM_RAWQUERIES='/usr/data/cacm/ftp.cs.cornell.edu/query.text'
	CACM_RELS='/usr/data/cacm/ftp.cs.cornell.edu/qrels.text'

	# Work folders
	LUCENE_INDEX='/usr/data/index/lucene/cacm2/'
	SCRIPTFOLDER=$(pwd)
	WORKFOLDER=$CORPUS_PREFIX'.'$SE_PREFIX'.'$(date +%Y-%m-%d_%H-%m-%S)

	# File prefixes
	QUERIES=$CORPUS_PREFIX'.queries'
	RELEVANT=$CORPUS_PREFIX'.relevant'
	SERP=$CORPUS_PREFIX'.'$SE_PREFIX'.serp'
	RETURNED_PREFIX=$CORPUS_PREFIX'.'$SE_PREFIX'.returned'
	RESULTS_PREFIX=$CORPUS_PREFIX'.'$SE_PREFIX'.results'

	# Prepared data
	TRECEVAL_INPUT=$RETURNED_PREFIX'.trec_results'
	TRECEVAL_QRELS=$RELEVANT.trec_qrels
	RETURNED=$RETURNED_PREFIX'.items'

	# Base metrics
	RIR=$RETURNED_PREFIX'.relevant.items.sum'
	# Relevant Items
	REL=$RELEVANT'.sum'
	# Retrieved Items
	RET=$RETURNED_PREFIX'.items.sum'

	# Complex metrics
	OCTAVE_OUT=$RESULTS_PREFIX'.octave.csv'
	OCTAVE_STAT=$RESULTS_PREFIX'.octave.stat.csv'
	TRECEVAL_OUT=$RESULTS_PREFIX'.trec'
}

#===  FUNCTION  ================================================================
# NAME : f1
# DESCRIPTION : Indexing
#===============================================================================
function f1 {
	echo '1. Indexing from: ' $CACM_CORPUS ' to: ' $LUCENE_INDEX
	java org.apache.lucene.demo.IndexFiles -docs $CACM_CORPUS -index $LUCENE_INDEX

	if [ -z "${a}" ]; then
		read -p '1. Indexing completed. Continue? ' -n 1 -r; printf '\n'
	else REPLY='Y'; fi
	if [[ $REPLY =~ ^[Nn]$ ]]
	then
		return 1
	fi
}

#===  FUNCTION  ================================================================
# NAME : f2
# DESCRIPTION : Query preparation
#===============================================================================
function f2 {
	echo '2. Query preparation'
	# 1. extract questions
	grep -Pzo "^[.]W(\n[^.][[:print:]]*)*" < $CACM_RAWQUERIES | \
	# 2. get rid of unnecessary line feeds and spaces
	awk '{gsub(/^ */,"",$1); printf "%s ", $0}' | \
	# 3. split one query per line
	awk '{ gsub(".W ", "\n") ; print $0 }' | \
	# 4. remove first line (it's empty) & line ending spaces
	awk '/./' | awk '{$1=$1}1' |
	# 5. remove syntactical errors
	awk '{
		gsub("/1;",   "\\/1)") ;
		gsub("\"\\?", "\"\\\?") ;
		gsub("*",     "\\*") ;
		gsub(":,",    "\",") ;
		gsub("/n",    "\\/n") ; print $0 }' > $QUERIES

	if [ -z "${a}" ]; then
		read -p '2. Query preparation completed. Continue? ' -n 1 -r; printf '\n'
	else REPLY='Y'; fi
	if [[ $REPLY =~ ^[Nn]$ ]]
	then
		return 1
	fi
}

#===  FUNCTION  ================================================================
# NAME : f3
# DESCRIPTION : Retrieval running / SERP gathering
#===============================================================================
function f3 {
	echo '3. Retrieval running / SERP gathering'
	PARAMS="-index $LUCENE_INDEX -queries $QUERIES"
	## SERP 10
	java org.apache.lucene.demo.SearchFiles $PARAMS -paging 10 > $SERP.top10
	## SERP 100
	java org.apache.lucene.demo.SearchFiles $PARAMS -paging 100 > $SERP.top100
	## SERP all
	java org.apache.lucene.demo.SearchFiles $PARAMS -paging 4000 > $SERP

	if [ -z "${a}" ]; then
		read -p '3. SERPs collected. Continue? ' -n 1 -r; printf '\n'
	else REPLY='Y'; fi
	if [[ $REPLY =~ ^[Nn]$ ]]
	then
		return 1
	fi
}

#===  FUNCTION  ================================================================
# NAME : f4
# DESCRIPTION : Data extraction from SERPs
#===============================================================================
function f4 {
	echo '4. Data extraction from SERPs'
	## 4.1. SERP refine
	awk '$2 ~ /total/ {printf $1" ";}
		$1 ~ /[[:digit:]]*\./ {gsub(/.*CACM-/, "");
		gsub(".html", " "); printf $0;}
		$1 ~ /Searching/ {printf "\n";}' < $SERP.top10 | \
		awk '/./' > $RETURNED.top10

	awk '$2 ~ /total/ {printf $1" ";}
		$1 ~ /[[:digit:]]*\./ {gsub(/.*CACM-/, "");
		gsub(".html", " "); printf $0;}
		$1 ~ /Searching/ {printf "\n";}' < $SERP.top100 | \
		awk '/./' > $RETURNED.top100

	awk '$2 ~ /total/ {printf $1" ";}
		$1 ~ /[[:digit:]]*\./ {gsub(/.*CACM-/, "");
		gsub(".html", " "); printf $0;}
		$1 ~ /Searching/ {printf "\n";}' < $SERP | \
		awk '/./' > $RETURNED

	grep "total matching" $SERP | awk '{print $1}' > $RET

	awk 'BEGIN {ln=1;} {
			for(i=2; i<=NF; i++) {
				printf ln" Q0 CACM-"$i" "i-1" "(NF-i+0.1)/NF" STANDARD\n"
			}
		}
		{ln++;}' $RETURNED > $TRECEVAL_INPUT

	if [ -z "${a}" ]; then
		read -p '4. Data extracted from SERPs. Continue? ' -n 1 -r; printf '\n'
	else REPLY='Y'; fi
	if [[ $REPLY =~ ^[Nn]$ ]]
	then
		return 1
	fi
}

#===  FUNCTION  ================================================================
# NAME : f5
# DESCRIPTION : Relations preparing
#===============================================================================
function f5 {
	echo '5. Relations preparing'
	awk 'BEGIN {prev="";}
		prev !~ $1 {printf "\n"$1" ";}
		{printf $2" "; prev=$1;}' < $CACM_RELS | \
	awk '/./' | \
	awk 'BEGIN {cnt=1;}
		{gsub("^0","");}
		{while (cnt<$1) {printf "\n";cnt++}}
		cnt ~ $1 {$1=""; print $0; cnt++;}' | \
	awk '{gsub("^ ",""); print;}' > $RELEVANT

	awk '{printf NF"\n"}' $RELEVANT > $REL

	awk '$1 {gsub(/^0/,"");}
		{printf $1" Q0 CACM-"$2" 1\n";}' $CACM_RELS \
		> $TRECEVAL_QRELS

	if [ -z "${a}" ]; then
		read -p '5. Relations prepared. Continue? ' -n 1 -r; printf '\n'
	else REPLY='Y'; fi
	if [[ $REPLY =~ ^[Nn]$ ]]
	then
		return 1
	fi
}

#===  FUNCTION  ================================================================
# NAME : f6
# DESCRIPTION : Results Comparing
#===============================================================================
function f6 {
	echo '6. Results comparing'

	# count number of intersected documents for each query
	for i in {1..64}; do
		cat <(head --lines=$i $RETURNED.top10 | \
				tail --lines=1 && \
			head --lines=$i $RELEVANT | \
				tail --lines=1) | \
		tr ' ' '\n' | awk /./ | sort | uniq -c | \
			grep " 2 " | wc -l
	done > $RIR.top10

	for i in {1..64}; do
		cat <(head --lines=$i $RETURNED.top100 | \
				tail --lines=1 && \
			head --lines=$i $RELEVANT | \
				tail --lines=1) | \
		tr ' ' '\n' | awk /./ | sort | uniq -c | \
			grep " 2 " | wc -l
	done > $RIR.top100

	for i in {1..64}; do
		cat <(head --lines=$i $RETURNED | \
				tail --lines=1 && \
			head --lines=$i $RELEVANT | \
				tail --lines=1) | \
		tr ' ' '\n' | awk /./ | sort | uniq -c | \
			grep " 2 " | wc -l
	done > $RIR

	$SCRIPTFOLDER/octave_eval

	trec_eval -q $TRECEVAL_QRELS $TRECEVAL_INPUT \
		> $TRECEVAL_OUT

	printf "metric\query, " > $TRECEVAL_OUT'.csv'
	for y in $(awk '{print $2;}' $TRECEVAL_OUT | sort -g | uniq); do
		printf "%s, " "$y" >> $TRECEVAL_OUT'.csv'
	done
	echo >> $TRECEVAL_OUT'.csv'
	for x in $(
		awk '{print $1;}' $TRECEVAL_OUT | \
			sort | uniq -c | sort -k1,1rn -t'_' -k2,2n | \
			awk '{print $2;}'
		); do
		printf "%s, " "$x"
		for y in $(awk '{print $2;}' $TRECEVAL_OUT | sort -g | uniq); do
			grep "^$x " $TRECEVAL_OUT | \
				grep -P "\t$y\t" | \
				awk '{printf $3", "}'
		done
		echo ''
	done >> $TRECEVAL_OUT'.csv'

	if [ -z "${a}" ]; then
		read -p '6. Results compared. Continue? ' -n 1 -r; printf '\n'
	else REPLY='Y'; fi
	if [[ $REPLY =~ ^[Nn]$ ]]
	then
		return 1
	fi
}

usage() {
	echo "Usage: $0 [-ac]" 1>&2
	return 0
}

#-------------------------------------------------------------------------------
# main()
#-------------------------------------------------------------------------------

f0

while getopts "hac" o; do
	case "${o}" in
	h)
		usage
		exit 0
		;;
	a)
		a=1
		echo 'never prompt / always yes' >&2
		;;
	c)
		echo 'Cleaning out . . .' >&2
		clean
		exit 0
		;;
	\?)
		echo "Invalid option: -$OPTARG" >&2
		exit 1
		;;
	esac
done

mkdir $WORKFOLDER
cd $WORKFOLDER

# rewrite to $LUCENE_INDEX''segments.gen
if [[ -e $LUCENE_INDEX/segments.gen ]]
then
	echo 'Index exists, skipping indexing'
else
	f1
	if [ $? == 1 ]
	then
		echo 'User exit'
		exit 0
	fi
fi

if [[ -s $QUERIES ]]
then
	echo 'Queries exist, query preparation skipping'
else
	f2
	if [ $? == 1 ]
	then
		echo 'User exit'
		exit 0
	fi
fi

if [[ -s $SERP && (-s $SERP.top10) && (-s $SERP.top100) ]]
then
	echo 'SERPs exist, SERP gathering skipping'
else
	f3
	if [ $? == 1 ]
	then
		echo 'User exit'
		exit 0
	fi
fi

if [[ -s $RETURNED && (-s $RETURNED.top10) && (-s $RETURNED.top100) && \
	(-s $RET) && (-s $TRECEVAL_INPUT) ]]
then
	echo 'SERP postings exist, SERP postings generation skipping'
else
	f4
	if [ $? == 1 ]
	then
		echo 'User exit'
		exit 0
	fi
fi

if [[ -s $RELEVANT && (-s $REL) && (-s $TRECEVAL_QRELS) ]]
then
	echo 'Relations exist, Relations postings generation skipping'
else
	f5
	if [ $? == 1 ]
	then
		echo 'User exit'
		exit 0
	fi
fi

f6

cd ..

